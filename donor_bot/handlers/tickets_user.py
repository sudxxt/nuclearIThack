from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from sqlalchemy.ext.asyncio import AsyncSession

from donor_bot.services.tickets import create_ticket, answer_ticket  # type: ignore
from donor_bot.services.donors import get_donor_by_tg_id
from donor_bot.config import settings

# Reply keyboard
from donor_bot.keyboards.donor import back_button, main_menu_kb  # type: ignore

router = Router()


class TicketCreateState(StatesGroup):
    waiting_for_subject = State()
    waiting_for_message = State()


class TicketReplyState(StatesGroup):
    waiting_for_reply = State()


# -------- —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞ ---------

@router.message(F.text == "üé´ –¢–∏–∫–µ—Ç")
async def ticket_start(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É —Ç–∏–∫–µ—Ç–∞:", reply_markup=back_button)
    await state.set_state(TicketCreateState.waiting_for_subject)


@router.message(TicketCreateState.waiting_for_subject)
async def ticket_subject(message: Message, state: FSMContext):
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu_kb)
        await state.clear()
        return
    if not message.text:
        return

    subj = message.text.strip()
    if len(subj) < 3:
        await message.answer("–¢–µ–º–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è. –£–∫–∞–∂–∏—Ç–µ –Ω–µ –º–µ–Ω–µ–µ 3 —Å–∏–º–≤–æ–ª–æ–≤.")
        return

    await state.update_data(subject=subj)
    await message.answer("–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –≤–æ–ø—Ä–æ—Å –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º (–Ω–µ –º–µ–Ω–µ–µ 10 —Å–∏–º–≤–æ–ª–æ–≤):")
    await state.set_state(TicketCreateState.waiting_for_message)


@router.message(TicketCreateState.waiting_for_message)
async def ticket_body(message: Message, state: FSMContext, session: AsyncSession, bot: Bot):
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu_kb)
        await state.clear()
        return
    if not message.text or not message.from_user:
        return

    body = message.text.strip()
    if len(body) < 10:
        await message.answer("–û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ–ø–∏—Å–∞—Ç—å –≤–æ–ø—Ä–æ—Å (–º–∏–Ω. 10 —Å–∏–º–≤–æ–ª–æ–≤).")
        return

    data = await state.get_data()
    subject = data.get("subject", "–ë–µ–∑ —Ç–µ–º—ã")
    ticket_text = f"{subject}\n\n{body}"
    ticket = await create_ticket(session, message.from_user.id, ticket_text)
    await message.answer("–¢–∏–∫–µ—Ç —Å–æ–∑–¥–∞–Ω ‚úÖ", reply_markup=main_menu_kb)

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
    from donor_bot.handlers.tickets_admin import send_ticket_embed  # lazy import to avoid cycle
    await send_ticket_embed(bot, session, ticket.id)  # type: ignore[arg-type]
    await state.clear()


# -------- –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ---------

@router.callback_query(F.data.startswith("user_ticket_reply:"))
async def user_ticket_reply_start(call: CallbackQuery, state: FSMContext):
    if not call.data:
        return
    ticket_id = int(call.data.split(":")[1])
    await state.update_data(ticket_id=ticket_id)
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç:")  # type: ignore[attr-defined]
    await state.set_state(TicketReplyState.waiting_for_reply)
    await call.answer()


@router.message(TicketReplyState.waiting_for_reply)
async def process_user_reply(message: Message, state: FSMContext, bot: Bot, session: AsyncSession):
    data = await state.get_data()
    ticket_id: int | None = data.get("ticket_id")  # type: ignore
    if ticket_id is None or not message.text or not message.from_user:
        await state.clear()
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏–∏ (–∫–∞–∫ answer), –Ω–µ –º–µ–Ω—è—è —Å—Ç–∞—Ç—É—Å
    await answer_ticket(session, ticket_id, 0, message.text)  # admin_id 0 –¥–ª—è –æ—Ç–ª–∏—á–∏—è?

    # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    from donor_bot.services.donors import get_donor_by_tg_id
    donor = await get_donor_by_tg_id(session, message.from_user.id)
    donor_name = getattr(donor, "full_name", None) or f"user {message.from_user.id}"
    text_to_admin = (
        f"–û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {donor_name} –ø–æ —Ç–∏–∫–µ—Ç—É {ticket_id}:\n{message.text}"
    )

    delivered = False
    if settings.ADMIN_CHAT_ID:
        try:
            await bot.send_message(settings.ADMIN_CHAT_ID, text_to_admin)
            delivered = True
        except Exception:
            pass
    if not delivered:
        for admin_id in settings.ADMIN_IDS:
            try:
                await bot.send_message(admin_id, text_to_admin)
                delivered = True
            except Exception:
                continue

    await message.answer("–í–∞—à –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
    await state.clear() 