from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, ReplyKeyboardRemove, KeyboardButton, ReplyKeyboardMarkup
from aiogram.types import FSInputFile
from pathlib import Path
from sqlalchemy.ext.asyncio import AsyncSession
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, WebAppInfo

from donor_bot.keyboards import main_menu_kb, admin_menu_kb
from donor_bot.services.donors import get_donor_by_tg_id, create_donor
from donor_bot.config import settings

router = Router()


class RegistrationState(StatesGroup):
    waiting_for_phone = State()
    waiting_for_agree = State()
    waiting_for_language = State()
    waiting_for_full_name = State()
    waiting_for_category = State()
    waiting_for_group = State()


@router.message(Command("start"))
async def cmd_start(message: Message, session: AsyncSession, state: FSMContext):
    if not message.from_user:
        return
    await state.clear()
    donor = await get_donor_by_tg_id(session, message.from_user.id)
    if donor:
        kb = admin_menu_kb if message.from_user.id in settings.ADMIN_IDS else main_menu_kb
        gif_path = Path(__file__).resolve().parent.parent / "data" / "donor.gif"
        if gif_path.exists():
            try:
                await message.answer_animation(animation=FSInputFile(str(gif_path)), caption="–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!", reply_markup=kb)
            except Exception:
                await message.answer("–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!", reply_markup=kb)
        else:
            await message.answer("–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!", reply_markup=kb)
    else:
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
        start_kb = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="üöÄ –ù–∞—á–∞—Ç—å", callback_data="reg:start")]]
        )
        welcome_text = (
            "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –±–æ—Ç –ø—Ä–æ–µ–∫—Ç–∞ ¬´–î–µ–Ω—å –î–æ–Ω–æ—Ä–∞ –ù–ò–Ø–£ –ú–ò–§–ò¬ª. "
            "–° –µ–≥–æ –ø–æ–º–æ—â—å—é –≤—ã —Å–º–æ–∂–µ—Ç–µ:\n"
            "‚Ä¢ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∞–∫—Ü–∏—é\n"
            "‚Ä¢ –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n"
            "‚Ä¢ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n\n"
            "–ù–∞–∂–º–∏—Ç–µ ¬´–ù–∞—á–∞—Ç—å¬ª, —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ –±—ã—Å—Ç—Ä—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é."
        )

        gif_path = Path(__file__).resolve().parent.parent / "data" / "donor.gif"
        if gif_path.exists():
            try:
                await message.answer_animation(animation=FSInputFile(str(gif_path)), caption=welcome_text, reply_markup=start_kb)
            except Exception:
                await message.answer(welcome_text, reply_markup=start_kb)
        else:
            await message.answer(welcome_text, reply_markup=start_kb)
        # –∂–¥—ë–º –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏


@router.callback_query(F.data == "reg:start")
async def reg_start_cb(call: CallbackQuery, state: FSMContext):
    await call.answer()
    await call.message.answer(  # type: ignore[union-attr]
        "–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", request_contact=True)]],
            resize_keyboard=True,
        )
    )
    await state.set_state(RegistrationState.waiting_for_phone)


@router.message(RegistrationState.waiting_for_phone, F.contact)
async def process_phone(message: Message, state: FSMContext):
    if not message.contact:
        return

    raw_phone = message.contact.phone_number
    import re
    # –î–æ–ø—É—Å—Ç–∏–º—ã +7XXXXXXXXXX –∏–ª–∏ 8XXXXXXXXXX (11 —Ü–∏—Ñ—Ä)
    if not re.match(r"^(\+?7\d{10}|8\d{10})$", raw_phone):
        await message.answer("–ü–æ—Ö–æ–∂–µ, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX.")
        return

    # –£–Ω–∏—Ñ–∏—Ü–∏—Ä—É–µ–º: –ø—Ä–∏–≤–æ–¥–∏–º –∫ +7XXXXXXXXXX
    digits = raw_phone.lstrip('+')
    if digits.startswith('8'):
        digits = '7' + digits[1:]
    normalized = '+' + digits

    await state.update_data(phone=normalized)
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    # –°—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —è–∑—ã–∫–∞ –±–µ–∑ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    lang_kb = InlineKeyboardMarkup(
        inline_keyboard=[[
            InlineKeyboardButton(text="–†—É—Å—Å–∫–∏–π", callback_data="reg:lang:ru"),
            InlineKeyboardButton(text="English", callback_data="reg:lang:en"),
        ]]
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose language:", reply_markup=lang_kb)
    await state.set_state(RegistrationState.waiting_for_language)


# --- Agreement accepted through WebApp ---


@router.message(RegistrationState.waiting_for_agree, F.web_app_data)
async def agree_pd_webapp(message: Message, state: FSMContext):
    """Handles data coming from the mini-app once the user ticks the checkboxes and presses ¬´–ü—Ä–∏–Ω—è—Ç—å¬ª."""
    # We trust mini-app validation ‚Äì any payload counts as consent
    await message.answer("–°–æ–≥–ª–∞—Å–∏–µ –ø–æ–ª—É—á–µ–Ω–æ ‚úÖ")

    # Ask language preference (reuse same flow as callback handler)
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

    lang_kb = InlineKeyboardMarkup(
        inline_keyboard=[[
            InlineKeyboardButton(text="–†—É—Å—Å–∫–∏–π", callback_data="reg:lang:ru"),
            InlineKeyboardButton(text="English", callback_data="reg:lang:en"),
        ]]
    )

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose language:", reply_markup=lang_kb)
    await state.set_state(RegistrationState.waiting_for_language)


@router.message(RegistrationState.waiting_for_full_name)
async def process_full_name(message: Message, state: FSMContext):
    if not message.text:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –§–ò–û.")
        return
    # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è: –º–∏–Ω–∏–º—É–º –¥–≤–µ –±—É–∫–≤—ã, –º–∏–Ω–∏–º—É–º –¥–≤–µ —á–∞—Å—Ç–∏ –∏–º–µ–Ω–∏
    import re
    cleaned = " ".join(message.text.strip().split())  # —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    if not re.match(r"^[–ê-–Ø–∞-—èA-Za-z\- ]{5,}$", cleaned) or len(cleaned.split()) < 2:
        await message.answer("–ü–æ—Ö–æ–∂–µ, –§–ò–û –≤–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é, –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    await state.update_data(full_name=cleaned)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="–°—Ç—É–¥–µ–Ω—Ç")],
                [KeyboardButton(text="–°–æ—Ç—Ä—É–¥–Ω–∏–∫")],
                [KeyboardButton(text="–ì–æ—Å—Ç—å")],
            ],
            resize_keyboard=True
        )
    )
    await state.set_state(RegistrationState.waiting_for_category)


@router.message(RegistrationState.waiting_for_category, F.text.in_({"–°—Ç—É–¥–µ–Ω—Ç", "–°–æ—Ç—Ä—É–¥–Ω–∏–∫", "–ì–æ—Å—Ç—å"}))
async def process_category(message: Message, state: FSMContext, session: AsyncSession):
    if not message.from_user or not message.text:
        return
    category = message.text.lower()
    await state.update_data(category=category)
    if category == "—Å—Ç—É–¥–µ–Ω—Ç":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ò–ö–ë–û-01-22).", reply_markup=ReplyKeyboardRemove())
        await state.set_state(RegistrationState.waiting_for_group)
    elif category == "–≥–æ—Å—Ç—å":
        data = await state.get_data()
        await create_donor(
            session=session,
            tg_id=message.from_user.id,
            phone=data["phone"],
            full_name=data["full_name"],
            category=data["category"],
            lang=data.get("lang", "ru"),
        )
        # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à–µ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ external_link, –µ—Å–ª–∏ –µ—Å—Ç—å
        link_note = ""
        try:
            from donor_bot.services.events import get_upcoming_events
            events = await get_upcoming_events(session)
            if events and events[0].external_link:
                link_note = f"\n–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É: {events[0].external_link}"
        except Exception:
            pass

        await message.answer(
            "–¢–∞–∫ –∫–∞–∫ –≤—ã –≤–Ω–µ—à–Ω–∏–π –¥–æ–Ω–æ—Ä, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Ç–∞–∫–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ—Ö–æ–¥–Ω–æ–π –ú–ò–§–ò." + link_note,
            reply_markup=main_menu_kb,
        )
        await state.clear()
    else:
        data = await state.get_data()
        await create_donor(
            session=session,
            tg_id=message.from_user.id,
            phone=data["phone"],
            full_name=data["full_name"],
            category=data["category"],
            lang=data.get("lang", "ru"),
        )
        await message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", reply_markup=main_menu_kb)
        await state.clear()


@router.message(RegistrationState.waiting_for_group)
async def process_group(message: Message, state: FSMContext, session: AsyncSession):
    if not message.from_user or not message.text:
        return

    import re
    group_clean = message.text.strip().upper()
    # –ü—Ä–∏–º–µ—Ä —Ñ–æ—Ä–º–∞—Ç–∞: –ò–ö–ë–û-01-22 –∏–ª–∏ ¬´MATH-101¬ª ‚Äì –±—É–∫–≤—ã/—Ü–∏—Ñ—Ä—ã/–¥–µ—Ñ–∏—Å
    if not re.match(r"^[A-Z–ê-–Ø0-9\-]{3,20}$", group_clean):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–±—É–∫–≤—ã/—Ü–∏—Ñ—Ä—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä –ò–ö–ë–û-01-22). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return

    await state.update_data(group=group_clean)
    data = await state.get_data()
    await create_donor(
        session=session,
        tg_id=message.from_user.id,
        phone=data["phone"],
        full_name=data["full_name"],
        category=data["category"],
        group=data["group"],
        lang=data.get("lang", "ru"),
    )
    await message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", reply_markup=main_menu_kb)
    await state.clear()


# --- Language selection during registration ---


@router.callback_query(RegistrationState.waiting_for_language, F.data.startswith("reg:lang:"))
async def reg_pick_language(call: CallbackQuery, state: FSMContext):
    lang = call.data.split(":", 2)[2]  # type: ignore
    await state.update_data(lang=lang)
    await call.message.edit_reply_markup(reply_markup=None)  # type: ignore[attr-defined]
    prompt = "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û –ø–æ–ª–Ω–æ—Å—Ç—å—é:" if lang == "ru" else "Please enter your full name:"
    await call.message.answer(prompt, reply_markup=ReplyKeyboardRemove())  # type: ignore[attr-defined]
    await state.set_state(RegistrationState.waiting_for_full_name)
    await call.answer()


# ---------- /help ----------


@router.message(Command("help"))
async def cmd_help(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫—Ä–∞—Ç–∫—É—é —Å–ø—Ä–∞–≤–∫—É –ø–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º –±–æ—Ç–∞ (—Ä–∞–∑–Ω—ã–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∞–¥–º–∏–Ω–∞)."""
    user_lines = [
        "<b>–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>",
        "‚Ä¢ ü©∏ –ú–æ—è –∫–∞—Ä—Ç–æ—á–∫–∞ ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ–Ω–∞—Ü–∏–π, –æ—á–∫–∏, —É—Ä–æ–≤–µ–Ω—å", 
        "‚Ä¢ ‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ‚Äî —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –¥–æ–Ω–æ—Ä–∞–º, –î–ö–ú, –ø—Ä–æ—Ü–µ—Å—Å –≤ –ú–ò–§–ò", 
        "‚Ä¢ üìÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è ‚Äî –∑–∞–ø–∏—Å—å (—Å –∫–∞–ª–µ–Ω–¥–∞—Ä—ë–º) –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ –∞–∫—Ü–∏–∏", 
        "‚Ä¢ üé´ –¢–∏–∫–µ—Ç ‚Äî –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞–º", 
        "‚Ä¢ üèÜ –†–µ–π—Ç–∏–Ω–≥ ‚Äî —Ç–æ–ø‚Äê–¥–æ–Ω–æ—Ä—ã –≥–æ–¥–∞", 
        "‚Ä¢ ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (—Å–∫–æ—Ä–æ)",
        "\n–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:",
        "‚Ä¢ /start ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è", 
        "‚Ä¢ /help ‚Äî —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞",
    ]

    # –ï—Å–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä ‚Äî –¥–æ–±–∞–≤–∏–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ä–∞–∑–¥–µ–ª
    from donor_bot.config import settings as _s
    if message.from_user and message.from_user.id in _s.ADMIN_IDS:
        admin_lines = [
            "\n<b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:</b>",
            "‚Ä¢ üìÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è ‚Äî –≤–∫–ª–∞–¥–∫–∏ –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ / –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ, –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—å", 
            "    ‚Ä¢ –≤ –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö ‚Äî –æ—Ç–º–µ—Ç–∫–∞ ‚úÖ/‚ùå –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è", 
            "‚Ä¢ üí¨ –†–∞—Å—Å—ã–ª–∫–∞ ‚Äî –≤—ã–±–æ—Ä —Å–µ–≥–º–µ–Ω—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è", 
            "‚Ä¢ üì• –ò–º–ø–æ—Ä—Ç –î–î ‚Äî –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–∫—Ü–∏–∏ (.xlsx)",
            "‚Ä¢ üìä –≠–∫—Å–ø–æ—Ä—Ç ‚Äî –≤—ã–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –¥–æ–Ω–æ—Ä–æ–≤ –∞–∫—Ü–∏–∏", 
            "‚Ä¢ üìà –û—Ç—á—ë—Ç ‚Äî —Å–≤–æ–¥–Ω—ã–π Excel –ø–æ –≤—Å–µ–º –∞–∫—Ü–∏—è–º", 
            "‚Ä¢ ü©∏ –î–æ–Ω–æ—Ä—ã ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ —ç–∫—Å–ø–æ—Ä—Ç –±–∞–∑—ã", 
            "‚Ä¢ üé´ –¢–∏–∫–µ—Ç—ã ‚Äî –≤–æ–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", 
            "‚Ä¢ /donor edit <id|phone> field=value ‚Äî –ø—Ä–∞–≤–∫–∞ –¥–æ–Ω–æ—Ä–∞ —Ç–µ–∫—Å—Ç–æ–º", 
            "‚Ä¢ /info list | /info edit <key> ‚Äî —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü", 
            "‚Ä¢ /import ‚Äî –∏–º–ø–æ—Ä—Ç –¥–æ–Ω–æ—Ä–æ–≤ –∏–∑ Excel", 
            "‚Ä¢ /donors_export ‚Äî —ç–∫—Å–ø–æ—Ä—Ç –≤—Å–µ–π –±–∞–∑—ã –¥–æ–Ω–æ—Ä–æ–≤", 
        ]
        user_lines.extend(admin_lines)

    await message.answer("\n".join(user_lines), parse_mode="HTML")


@router.message(RegistrationState.waiting_for_phone, F.text)
async def process_phone_text(message: Message, state: FSMContext):
    """Fallback when user enters phone number as plain text instead of sharing a contact."""
    if not message.text:
        return
    raw_phone = message.text.strip()

    import re
    if not re.match(r"^(\+?7\d{10}|8\d{10})$", raw_phone):
        await message.answer(
            "–ü–æ—Ö–æ–∂–µ, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º\"."
        )
        return

    # –£–Ω–∏—Ñ–∏—Ü–∏—Ä—É–µ–º: –ø—Ä–∏–≤–æ–¥–∏–º –∫ +7XXXXXXXXXX
    digits = raw_phone.lstrip('+')
    if digits.startswith('8'):
        digits = '7' + digits[1:]
    normalized = '+' + digits

    await state.update_data(phone=normalized)

    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

    # –°—Ä–∞–∑—É —Å–ø—Ä–∞—à–∏–≤–∞–µ–º —è–∑—ã–∫, –º–∏–Ω—É—è —ç—Ç–∞–ø —Å–æ–≥–ª–∞—Å–∏—è
    lang_kb = InlineKeyboardMarkup(
        inline_keyboard=[[
            InlineKeyboardButton(text="–†—É—Å—Å–∫–∏–π", callback_data="reg:lang:ru"),
            InlineKeyboardButton(text="English", callback_data="reg:lang:en"),
        ]]
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose language:", reply_markup=lang_kb)
    await state.set_state(RegistrationState.waiting_for_language)
